// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "github.com/GDGVIT/Project-Hades/participants/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateAttendeeEndpoint    endpoint.Endpoint
	ReadAttendeeEndpoint      endpoint.Endpoint
	RmAttendeeEndpoint        endpoint.Endpoint
	DeleteAttendeeEndpoint    endpoint.Endpoint
	DeleteAllAttendeeEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.ParticipantsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CreateAttendeeEndpoint:    MakeCreateAttendeeEndpoint(s),
		DeleteAllAttendeeEndpoint: MakeDeleteAllAttendeeEndpoint(s),
		DeleteAttendeeEndpoint:    MakeDeleteAttendeeEndpoint(s),
		ReadAttendeeEndpoint:      MakeReadAttendeeEndpoint(s),
		RmAttendeeEndpoint:        MakeRmAttendeeEndpoint(s),
	}
	for _, m := range mdw["CreateAttendee"] {
		eps.CreateAttendeeEndpoint = m(eps.CreateAttendeeEndpoint)
	}
	for _, m := range mdw["ReadAttendee"] {
		eps.ReadAttendeeEndpoint = m(eps.ReadAttendeeEndpoint)
	}
	for _, m := range mdw["RmAttendee"] {
		eps.RmAttendeeEndpoint = m(eps.RmAttendeeEndpoint)
	}
	for _, m := range mdw["DeleteAttendee"] {
		eps.DeleteAttendeeEndpoint = m(eps.DeleteAttendeeEndpoint)
	}
	for _, m := range mdw["DeleteAllAttendee"] {
		eps.DeleteAllAttendeeEndpoint = m(eps.DeleteAllAttendeeEndpoint)
	}
	return eps
}
