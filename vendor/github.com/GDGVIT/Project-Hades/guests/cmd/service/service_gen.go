// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint "github.com/GDGVIT/Project-Hades/guests/pkg/endpoint"
	http1 "github.com/GDGVIT/Project-Hades/guests/pkg/http"
	service "github.com/GDGVIT/Project-Hades/guests/pkg/service"
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"CreateGuest":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateGuest", logger))},
		"CreateSponsor": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateSponsor", logger))},
		"DeleteGuest":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteGuest", logger))},
		"DeleteSponsor": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteSponsor", logger))},
		"ReadGuest":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadGuest", logger))},
		"ReadSponsor":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadSponsor", logger))},
		"UpdateGuest":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateGuest", logger))},
		"UpdateSponsor": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateSponsor", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["CreateGuest"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "CreateGuest")), endpoint.InstrumentingMiddleware(duration.With("method", "CreateGuest"))}
	mw["ReadGuest"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ReadGuest")), endpoint.InstrumentingMiddleware(duration.With("method", "ReadGuest"))}
	mw["UpdateGuest"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateGuest")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateGuest"))}
	mw["DeleteGuest"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteGuest")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteGuest"))}
	mw["CreateSponsor"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "CreateSponsor")), endpoint.InstrumentingMiddleware(duration.With("method", "CreateSponsor"))}
	mw["ReadSponsor"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ReadSponsor")), endpoint.InstrumentingMiddleware(duration.With("method", "ReadSponsor"))}
	mw["UpdateSponsor"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateSponsor")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateSponsor"))}
	mw["DeleteSponsor"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteSponsor")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteSponsor"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"CreateGuest", "ReadGuest", "UpdateGuest", "DeleteGuest", "CreateSponsor", "ReadSponsor", "UpdateSponsor", "DeleteSponsor"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
