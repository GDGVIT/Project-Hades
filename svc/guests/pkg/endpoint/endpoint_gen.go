// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "github.com/GDGVIT/Project-Hades/guests/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateGuestEndpoint   endpoint.Endpoint
	ReadGuestEndpoint     endpoint.Endpoint
	UpdateGuestEndpoint   endpoint.Endpoint
	DeleteGuestEndpoint   endpoint.Endpoint
	CreateSponsorEndpoint endpoint.Endpoint
	ReadSponsorEndpoint   endpoint.Endpoint
	UpdateSponsorEndpoint endpoint.Endpoint
	DeleteSponsorEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.GuestsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CreateGuestEndpoint:   MakeCreateGuestEndpoint(s),
		CreateSponsorEndpoint: MakeCreateSponsorEndpoint(s),
		DeleteGuestEndpoint:   MakeDeleteGuestEndpoint(s),
		DeleteSponsorEndpoint: MakeDeleteSponsorEndpoint(s),
		ReadGuestEndpoint:     MakeReadGuestEndpoint(s),
		ReadSponsorEndpoint:   MakeReadSponsorEndpoint(s),
		UpdateGuestEndpoint:   MakeUpdateGuestEndpoint(s),
		UpdateSponsorEndpoint: MakeUpdateSponsorEndpoint(s),
	}
	for _, m := range mdw["CreateGuest"] {
		eps.CreateGuestEndpoint = m(eps.CreateGuestEndpoint)
	}
	for _, m := range mdw["ReadGuest"] {
		eps.ReadGuestEndpoint = m(eps.ReadGuestEndpoint)
	}
	for _, m := range mdw["UpdateGuest"] {
		eps.UpdateGuestEndpoint = m(eps.UpdateGuestEndpoint)
	}
	for _, m := range mdw["DeleteGuest"] {
		eps.DeleteGuestEndpoint = m(eps.DeleteGuestEndpoint)
	}
	for _, m := range mdw["CreateSponsor"] {
		eps.CreateSponsorEndpoint = m(eps.CreateSponsorEndpoint)
	}
	for _, m := range mdw["ReadSponsor"] {
		eps.ReadSponsorEndpoint = m(eps.ReadSponsorEndpoint)
	}
	for _, m := range mdw["UpdateSponsor"] {
		eps.UpdateSponsorEndpoint = m(eps.UpdateSponsorEndpoint)
	}
	for _, m := range mdw["DeleteSponsor"] {
		eps.DeleteSponsorEndpoint = m(eps.DeleteSponsorEndpoint)
	}
	return eps
}
