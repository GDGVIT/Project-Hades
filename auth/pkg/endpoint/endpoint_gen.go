// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "github.com/GDGVIT/Project-Hades/auth/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	LoginEndpoint       endpoint.Endpoint
	SignupEndpoint      endpoint.Endpoint
	CreateOrgEndpoint   endpoint.Endpoint
	InviteEndpoint      endpoint.Endpoint
	ShowInvitesEndpoint endpoint.Endpoint
	ShowProfileEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AuthService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CreateOrgEndpoint:   MakeCreateOrgEndpoint(s),
		InviteEndpoint:      MakeInviteEndpoint(s),
		LoginEndpoint:       MakeLoginEndpoint(s),
		ShowInvitesEndpoint: MakeShowInvitesEndpoint(s),
		ShowProfileEndpoint: MakeShowProfileEndpoint(s),
		SignupEndpoint:      MakeSignupEndpoint(s),
	}
	for _, m := range mdw["Login"] {
		eps.LoginEndpoint = m(eps.LoginEndpoint)
	}
	for _, m := range mdw["Signup"] {
		eps.SignupEndpoint = m(eps.SignupEndpoint)
	}
	for _, m := range mdw["CreateOrg"] {
		eps.CreateOrgEndpoint = m(eps.CreateOrgEndpoint)
	}
	for _, m := range mdw["Invite"] {
		eps.InviteEndpoint = m(eps.InviteEndpoint)
	}
	for _, m := range mdw["ShowInvites"] {
		eps.ShowInvitesEndpoint = m(eps.ShowInvitesEndpoint)
	}
	for _, m := range mdw["ShowProfile"] {
		eps.ShowProfileEndpoint = m(eps.ShowProfileEndpoint)
	}
	return eps
}
