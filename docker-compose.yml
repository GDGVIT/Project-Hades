version: "3.2"
services:
  mailerqr:
    image: angadsharma1016/hades_mailer_qr:latest
    container_name: mailerqr_hades
    #depends_on:
    #- events
    #- participants
    #- simple_projection
    restart: on-failure
    ports:
      - 3000:3000
    #environment:
    # BASE_URL: http://hades.com
  permission_generator:
    image: angadsharma1016/hades_permission_generator:latest
    restart: on-failure
    container_name: permission_generator_hades
    ports: 
    - 3001:3000
    #depends_on:
    #- simple_projection
  coupons:
    build:
      context: .
      dockerfile: coupons/Dockerfile
    container_name: coupons_hades
    depends_on:
    - neo4j
    ports:
    - 8082:8082
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
      SALT: "${SALT}"
  event:
    build:
      context: .
      dockerfile: events/Dockerfile
    container_name: event_hades
    depends_on:
    - neo4j
    ports:
    - 8080:8080
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
  participants:
    build:
      context: .
      dockerfile: participants/Dockerfile
    container_name: participants_hades
    depends_on:
    - neo4j
    ports:
    - 8081:8081
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
  simple_projection:
    build:
      context: .
      dockerfile: simple_projection/Dockerfile
    container_name: simple_projection_hades
    depends_on:
    - neo4j
    ports:
    - 8083:8083
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
  exporter:
    build:
      context: .
      dockerfile: exporter/Dockerfile
    container_name: exporter_hades
    ports:
    - 8084:8084
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    depends_on:
      - simple_projection
    env_file: ./.env
    environment:
      PROD_URI: "${PROD_URI}"
      SIMPLE_PROJECTION_URI: "${SIMPLE_PROJECTION_URI}"
  analytics:
    build:
      context: .
      dockerfile: analytics/Dockerfile
    container_name: analytics_hades
    ports:
    - 8085:8085
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    env_file: ./.env
    environment:
      MAIL_FROM: "${MAIL_FROM}"
      MAIL_TO: "${MAIL_TO}"
      MAIL_PASSWORD: "${MAIL_PASSWORD}"
  guests:
    build:
      context: .
      dockerfile: guests/Dockerfile
    container_name: guests_hades
    depends_on:
    - neo4j
    ports:
    - 8086:8086
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
    container_name: auth_hades
    depends_on:
    - neo4j
    ports:
    - 8087:8087
    volumes:
    - .:/go/src/github.com/GDGVIT/Project-Hades
    restart: on-failure
    environment:
      PROD_URI: "${PROD_URI}"
      JWT_PASSWORD: "${JWT_PASSWORD}"
  neo4j:
    container_name: neo4j_hades
    image: neo4j:latest
    ports:
    - 7474:7474
    - 7687:7687
    restart: on-failure
    volumes:
    - ./db/data:/data/
    - ./db/conf/:/conf/
    command: neo4j
    env_file: ./.env
    environment:
      NEO4J_AUTH: "${NEO4J_AUTH}"
  nginx:
    container_name: nginx_hades
    build:
      context: .
      dockerfile: Web/Dockerfile
    ports:
    - 80:80
    env_file: ./.env
    volumes:
    - ./Web/nginx.conf:/etc/nginx/nginx.conf
    # restart: on-failure
    links:
    - event:event
    - participants:participants
    - coupons:coupons
    - simple_projection:simple_projection
    - guests:guests
    - analytics:analytics
  nats:
    container_name: nats_hades
    image: nats
    ports:
      - 4222:4222 # for clients
      - 8222:8222 # HTTP management port for reporting
      - 6222:6222 # routing port for clustering
volumes:
  dgraph:
